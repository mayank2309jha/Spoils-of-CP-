/* package codechef; // don't place package name! */

import java.util.*;
import java.lang.*;
import java.io.*;

/* Name of the class has to be "Main" only if the class is public. */
class Codechef
{
    public static int power(int n,int power){
        int result = 1;
        for(int i=0;i<power;i++){
            result = result*n;
        }
        return result;
    }
    public static HashMap<Integer,Integer> divisors(int num){
        HashMap<Integer,Integer> map = new HashMap<>();
        //The keys of the map will denote the divisors and the values of the keys will denote
        // the number of times that divisors has to be multiplied.
        map.put(1,1);
        int temp = num;
        for(int i=2;i<=Math.ceil(Math.sqrt(num));i++){
            while((temp%i)==0){
                if((temp%i)==0){
                    if(map.containsKey(i)){
                        map.replace(i,map.get(i),map.get(i)+1);
                    }
                    else{
                        map.put(i,1);
                    }
                    temp = temp/i;
                }
            }
        }
        //In the prime divisors we are excluding the numebr itself for now.
        //map.put(num,1);
        return map;
    }
    public static int smallestNumberToMultiply(HashMap<Integer,Integer> nMap,HashMap<Integer,Integer> kMap){
        //This function returns the smallest number that is to be multiplied to a given number k whose divisors are represented
        // in the hashmap kMap such that it becomes a multiple of n whose prime divisors are represented in teh hashamp nMap.

        //We will remove all the keys from the nMap which are present in kMap as well.
        //We subtract the values of these keys in nMap by the vaues of the keys in kMap.
        HashSet<Integer> toRemove = new HashSet<>();
        HashSet<Integer> toReduce = new HashSet<>();
        for(Map.Entry<Integer,Integer> entry: nMap.entrySet()){
            int key = entry.getKey();
            if(kMap.containsKey(key)){
                //Now we compare there values.
                if(nMap.get(key) > kMap.get(key)){
                    toReduce.add(key);
                }
                else if(nMap.get(key) <= kMap.get(key)){
                    toReduce.add(key);
                }
            }
        }
        for(int item: toRemove){
            nMap.remove(item);
        }
        for(int item: toReduce){
            nMap.replace(item,nMap.get(item),nMap.get(item)-kMap.get(item));
        }

        int product = 1;
        for(Map.Entry<Integer,Integer> entry: nMap.entrySet()){
            int key = entry.getKey();
            int toMultiply = power(key, nMap.get(key));
            product = product*toMultiply;
        }
        return product;
    }

	public static void main (String[] args) throws java.lang.Exception
    {
        Scanner input = new Scanner(System.in);
        int T = Integer.parseInt(input.nextLine());
        ArrayList<Integer> ans = new ArrayList<>();
        for(int i=0;i<T;i++){
            String line = input.nextLine();
            int n = Integer.parseInt(line.split(" ")[0]);
            int k = Integer.parseInt(line.split(" ")[1]);
            if(n==k){
                ans.add(1);
            }
            else if(n%k==0){
                ans.add(n/k);
            }
            else if((k%n)==0){
                ans.add(1);
            }
            else{
                HashMap<Integer,Integer> nMap = divisors(n);
                HashMap<Integer,Integer> kMap = divisors(k);
                ans.add(smallestNumberToMultiply(nMap,kMap));
            }
        }
        for(int i=0;i<T;i++){
            System.out.println(ans.get(i));
        }
    }
}
